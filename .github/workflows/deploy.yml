name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  NODE_VERSION: '18'
  TERRAFORM_BASE_DIR: './terraform/environments'

jobs:
  build-and-deploy:
    name: 'Build and Deploy'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set Environment
      id: env
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          echo "env_name=prod" >> $GITHUB_OUTPUT
          echo "working_dir=${{ env.TERRAFORM_BASE_DIR }}/prod" >> $GITHUB_OUTPUT
        else
          echo "env_name=dev" >> $GITHUB_OUTPUT
          echo "working_dir=${{ env.TERRAFORM_BASE_DIR }}/dev" >> $GITHUB_OUTPUT
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Build Lambda Function
      run: |
        # Build TypeScript Lambda
        cd src/video-processing
        npm install
        npm run build
        
        # Create deployment package
        mkdir -p ../../terraform/modules/processing
        cp -r dist/* .
        zip -r ../../terraform/modules/processing/processor.zip .
        cd ../..

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      working-directory: ${{ steps.env.outputs.working_dir }}
      run: terraform init -backend=true

    - name: Terraform Format
      working-directory: ${{ steps.env.outputs.working_dir }}
      run: terraform fmt -recursive

    - name: Terraform Plan
      working-directory: ${{ steps.env.outputs.working_dir }}
      id: plan
      run: terraform plan -no-color

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      working-directory: ${{ steps.env.outputs.working_dir }}
      run: terraform apply -auto-approve